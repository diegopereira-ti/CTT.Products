name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # Step 1: Build and Run Unit Tests
  build-and-unit-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run Unit Tests
      run: dotnet test --no-build --configuration Release --filter Category!=Integration --logger "trx"

  # Step 2: Run Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-unit-tests
    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({ ping: 1 })' | mongo --username mongo --password mongo --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        env:
          MONGO_INITDB_ROOT_USERNAME: mongo
          MONGO_INITDB_ROOT_PASSWORD: mongo
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore
    
    - name: Wait for MongoDB to be ready
      run: sleep 15

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run Integration Tests
      env:
        MongoDb__ConnectionString: "mongodb://mongo:mongo@localhost:27017"
        MongoDb__DatabaseName: "TestDatabase"
      run: dotnet test --no-build --configuration Release --filter Category=Integration --logger "trx"
  buid:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    - name: Restore dependencies
      run: dotnet restore
    - name: Build solution
      run: dotnet build --no-restore --configuration Release

  # Step 3: Build, Test, and Deploy
  build-test-deploy:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run All Tests
      run: dotnet test --no-build --configuration Release --filter Category!=Integration --logger "trx"

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/productapi:latest .

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/productapi:latest

    - name: Clone deployment repo
      run: |  
             git config --global user.email "github-actions@github.com"  
             git config --global user.name "GitHub Actions"  
             git clone https://${{ secrets.MANIFEST_REPO_TOKEN }}@${{ secrets.MANIFEST_REPO_URL }} manifest-repo  
             cp -r k8s/* manifest-repo/  
             cd manifest-repo  
             git checkout -b update-k8s-manifests  
             git add .  
             git commit -m "Update k8s manifests for latest deploy"  
             git push origin update-k8s-manifests
      env:
        GIT_TERMINAL_PROMPT: 0
    
    - name: Wait for Clone deployment to be ready
      run: sleep 30

    - name: Create PR in manifest repo
      uses: repo-sync/pull-request@v2
      with:
        source_branch: "update-k8s-manifests"
        destination_branch: "main"
        github_token: ${{ secrets.MANIFEST_REPO_TOKEN }}
        pr_title: "Update K8s manifests for latest deploy"
        pr_body: "Auto-generated by CI/CD pipeline"